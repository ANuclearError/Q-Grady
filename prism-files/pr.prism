dtmc

module INPUT_Y
    y: [-1..1] init - 1;

    [] y = -1 & z = -1 -> 0.5 : (y' =  0) + 0.5 : (y' = 1); // The initial decision
    [b] y = -1 -> 0.5 : (y' =  0) + 0.5 : (y' = 1); // The other output has been chosen

    [y0] y = 0 -> (y' = 0);
    [y1] y = 1 -> (y' = 1);
endmodule

module INPUT_Z
    z: [-1..1] init - 1;

    [] y = -1 & z = -1 -> 0.5 : (z' =  0) + 0.5 : (z' = 1); // The initial decision
    [a] z = -1 -> 0.5 : (z' =  0) + 0.5 : (z' = 1); // The other output has been chosen

    [z0] z = 0 -> (z' = 0);
    [z1] z = 1 -> (z' = 1);
endmodule

module OUTPUT
    a: [-1..1] init - 1;
    b: [-1..1] init - 1;

    [a] a != -1 -> (a'=a);
    [b] b != -1 -> (b'=b);

    // P(a | y)
    [y0] a = -1 & b = -1 -> 0.5 : (a' = 0) + 0.5 : (a' = 1);
    [y1] a = -1 & b = -1 -> 0.5 : (a' = 0) + 0.5 : (a' = 1);

    // P(z | b)
    [z0] a = -1 & b = -1 -> 0.5 : (b' = 0) + 0.5 : (b' = 1);
    [z1] a = -1 & b = -1 -> 0.5 : (b' = 0) + 0.5 : (b' = 1);

    // Normalized probabilities of deciding b
    [z0] y = 0 & a = 0 & b = -1 -> 1.0 : (b' = 0) + 0.0 : (b' = 1);
    [z0] y = 0 & a = 1 & b = -1 -> 0.0 : (b' = 0) + 1.0 : (b' = 1);
    [z0] y = 1 & a = 0 & b = -1 -> 1.0 : (b' = 0) + 0.0 : (b' = 1);
    [z0] y = 1 & a = 1 & b = -1 -> 0.0 : (b' = 0) + 1.0 : (b' = 1);
    [z1] y = 0 & a = 0 & b = -1 -> 1.0 : (b' = 0) + 0.0 : (b' = 1);
    [z1] y = 0 & a = 1 & b = -1 -> 0.0 : (b' = 0) + 1.0 : (b' = 1);
    [z1] y = 1 & a = 0 & b = -1 -> 0.0 : (b' = 0) + 1.0 : (b' = 1);
    [z1] y = 1 & a = 1 & b = -1 -> 1.0 : (b' = 0) + 0.0 : (b' = 1);

    // Normalized probabilities of deciding a
    [y0] z = 0 & a = -1 & b = 0 -> 1.0 : (a' = 0) + 0.0 : (a' = 1);
    [y0] z = 0 & a = -1 & b = 1 -> 0.0 : (a' = 0) + 1.0 : (a' = 1);
    [y0] z = 1 & a = -1 & b = 0 -> 1.0 : (a' = 0) + 0.0 : (a' = 1);
    [y0] z = 1 & a = -1 & b = 1 -> 0.0 : (a' = 0) + 1.0 : (a' = 1);
    [y1] z = 0 & a = -1 & b = 0 -> 1.0 : (a' = 0) + 0.0 : (a' = 1);
    [y1] z = 0 & a = -1 & b = 1 -> 0.0 : (a' = 0) + 1.0 : (a' = 1);
    [y1] z = 1 & a = -1 & b = 0 -> 0.0 : (a' = 0) + 1.0 : (a' = 1);
    [y1] z = 1 & a = -1 & b = 1 -> 1.0 : (a' = 0) + 0.0 : (a' = 1);
endmodule