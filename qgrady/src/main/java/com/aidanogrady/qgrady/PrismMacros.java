package com.aidanogrady.qgrady;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

/**
 * The PrismMacros class handles all the string manipulation required to
 * create the Prism model generated by the compiler.
 *
 */
public class PrismMacros {
    public static final String EMPTY_LINE = "";

    public static final String MODEL_TYPE = "dtmc";

    public static final String MODULE = "module";

    public static final String END_MODULE = "endmodule";

    private static final String SYNC = "SYNC";

    private static final String GUARD = "GUARD";

    private static final String ACTION = "ACTION";

    private static final String VAR = "VAR";

    private static final String VAL = "VAL";

    private static final String INIT = "INIT";

    public static String varDec(String variable, int range, int init) {
        String varDec = "\tVAR : [-1..VAL] init INIT;";
        return varDec.replaceAll(VAL, Integer.toString(range))
                .replaceAll(INIT, Integer.toString(init))
                .replaceAll(VAR, variable);
    }

    public static String command(String sync, String guard, String action) {
        String command = "\t[SYNC] GUARD -> ACTION;";
        return command.replaceAll(SYNC, sync)
                .replaceAll(GUARD, guard)
                .replaceAll(ACTION, action);
    }

    public static String isEqual(String variable, int value) {
        String isEqual = "(VAR = VAL)";
        return isEqual.replaceAll(VAR, variable)
                .replaceAll(VAL, Integer.toString(value));
    }

    public static String isNotEqual(String variable, int value) {
        String isNotEqual = "(VAR = VAL)";
        return isNotEqual.replaceAll(VAR, variable)
                .replaceAll(VAL, Integer.toString(value));
    }

    public static String prob(double prob, String action) {
        String update = "VAL : ACTION";
        return update.replaceAll(VAL, Double.toString(prob))
                .replaceAll(ACTION, action);
    }

    public static String assign(String variable, int value) {
        String assign = "(VAR' = VAL)";
        return assign.replaceAll(VAL, Integer.toString(value))
                .replaceAll(VAR, variable);
    }

    public static String equalDist(String variable, int range) {
        double prob = 1.0 / range;
        List<String> actions = new ArrayList<>();
        for(int i = 0; i < range; i++) {
            String action = assign(variable, i);
            actions.add(prob(prob, action));
        }
       return listToString(actions, '+');
    }

    public static String listToString(List<String> list, char separator) {
        String sep = " " + separator + " ";
        String string = "";
        Iterator it = list.iterator();
        if(it.hasNext()) {
            string += it.next();
        }
        while(it.hasNext()) {
            string += sep;
            string += it.next();
        }
        return string;
    }
}
