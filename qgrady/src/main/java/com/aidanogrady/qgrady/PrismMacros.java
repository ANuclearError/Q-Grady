package com.aidanogrady.qgrady;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

/**
 * The PrismMacros class handles all the string manipulation required to
 * create the Prism model generated by the compiler.
 *
 * @author Aidan O'Grady
 * @since 0.7
 */
public class PrismMacros {
    /**
     * The type of the PRISM model being generated.
     */
    public static final String MODEL_TYPE = "dtmc";

    /**
     * Notation of the start of a module.
     */
    public static final String MODULE = "module";

    /**
     * Notation of the end of a module.
     */
    public static final String END_MODULE = "endmodule";

    /**
     * A placeholder for where the sync label would be.
     */
    private static final String SYNC = "<SYNC>";

    /**
     * A placeholder for where the guard of an command would.
     */
    private static final String GUARD = "<GUARD>";

    /**
     * A placeholder for where the action of a command would be.
     */
    private static final String ACTION = "<ACTION>";

    /**
     * A placeholder for where the variable of an action would be.
     */
    private static final String VAR = "<VAR>";

    /**
     * A placeholder for where the value of an action would be.
     */
    private static final String VAL = "<VAL>";

    /**
     * A placeholder for the initial value of a variable would be.
     */
    private static final String INIT = "<INIT>";

    /**
     * Returns the PRISM statement of a variable declaration.
     *
     * @param variable  the variable being declared.
     * @param range  the maximum value of the variable.
     * @param init  the initial value of the variable.
     * @return  PRISM variable declaration
     */
    public static String varDec(String variable, int range, int init) {
        String varDec = "\t<VAR> : [-1..<VAL>] init <INIT>;";
        return varDec.replaceAll(VAL, Integer.toString(range))
                .replaceAll(INIT, Integer.toString(init))
                .replaceAll(VAR, variable);
    }

    /**
     * Returns the PRISM statement of a variable declaration.
     *
     * @param variable  the variable being declared.
     * @param init  the initial value of the variable.
     * @return  PRISM variable declaration
     */
    public static String varDec(String variable, boolean init) {
        String varDec = "\t<VAR> : bool init <INIT>;";
        return varDec.replaceAll(INIT, Boolean.toString(init))
                .replaceAll(VAR, variable);

    }

    /**
     * Returns a PRISM statement with the given insertions.
     *
     * @param sync  the label of the sync of this statement.
     * @param guard  the guard of this statement.
     * @param action  the actions of this statement.
     * @return  PRISM statement.
     */
    public static String command(String sync, String guard, String action) {
        String command = "\t[<SYNC>] <GUARD> -> <ACTION>;";
        return command.replaceAll(SYNC, sync)
                .replaceAll(GUARD, guard)
                .replaceAll(ACTION, action);
    }

    /**
     * Returns a PRISM condition for whether the given variable is equal to the
     * given value.
     *
     * @param variable  the variable being compared.
     * @param value  the value being compared to
     * @return PRISM condition.
     */
    public static String isEqual(String variable, int value) {
        String isEqual = "(<VAR> = <VAL>)";
        return isEqual.replaceAll(VAR, variable)
                .replaceAll(VAL, Integer.toString(value));
    }

    /**
     * Returns a PRISM condition for whether the given variable is equal to the
     * given value.
     *
     * @param variable  the variable being compared.
     * @param value  the value being compared to
     * @return PRISM condition.
     */
    public static String isEqual(String variable, boolean value) {
        String isEqual = "(<VAR> = <VAL>)";
        return isEqual.replaceAll(VAR, variable)
                .replaceAll(VAL, Boolean.toString(value));
    }

    /**
     * Returns a PRISM condition for whether the given variable isn't equal to
     * the given value.
     *
     * @param variable  the variable being compared.
     * @param value  the value being compared to
     * @return PRISM condition.
     */
    public static String isNotEqual(String variable, int value) {
        String isNotEqual = "(<VAR> = <VAL>)";
        return isNotEqual.replaceAll(VAR, variable)
                .replaceAll(VAL, Integer.toString(value));
    }

    /**
     * Returns a PRISM condition for whether the given variable isn't equal to
     * the given value.
     *
     * @param variable  the variable being compared.
     * @param value  the value being compared to
     * @return PRISM condition.
     */
    public static String isNotEqual(String variable, boolean value) {
        String isNotEqual = "(<VAR> = <VAL>)";
        return isNotEqual.replaceAll(VAR, variable)
                .replaceAll(VAL, Boolean.toString(value));
    }

    /**
     * Returns an action with the given probability of that action happening.
     *
     * @param prob  the probability of the action occurring.
     * @param action  the action being performed.
     * @return  action
     */
    public static String prob(double prob, String action) {
        String update = "<VAL> : <ACTION>";
        return update.replaceAll(VAL, Double.toString(prob))
                .replaceAll(ACTION, action);
    }

    /**
     * Returns a command assigning the given value to the given variable.
     *
     * @param variable  the variable being assigned a value.
     * @param value  the value being assigned
     * @return  update
     */
    public static String assign(String variable, int value) {
        String assign = "(<VAR>' = <VAL>)";
        return assign.replaceAll(VAL, Integer.toString(value))
                .replaceAll(VAR, variable);
    }


    /**
     * Returns a command assigning the given value to the given variable.
     *
     * @param variable  the variable being assigned a value.
     * @param value  the value being assigned
     * @return  update
     */
    public static String assign(String variable, boolean value) {
        String assign = "(<VAR>' = <VAL>)";
        return assign.replaceAll(VAL, Boolean.toString(value))
                .replaceAll(VAR, variable);

    }

    /**
     * Returns a command where the given variable has a uniform distribution
     * over the given range.
     * @param variable  the variable beige assigned
     * @param range  how many values the variable can be assigned.
     * @return
     */
    public static String equalDist(String variable, int range) {
        double prob = 1.0 / range;
        List<String> actions = new ArrayList<>();
        for(int i = 0; i < range; i++) {
            String action = assign(variable, i);
            actions.add(prob(prob, action));
        }
       return listToString(actions, '+');
    }

    /**
     * Converts a list of strings, possibly denoting a series of guards or a
     * series of possible actions, into a single string separated by the given
     * separator.
     *
     * @param list  the strings required conversion
     * @param separator  what separates the strings?
     * @return new string.
     */
    public static String listToString(List<String> list, char separator) {
        String sep = " " + separator + " ";
        String string = "";
        Iterator it = list.iterator();
        if(it.hasNext()) {
            string += it.next();
        }
        while(it.hasNext()) {
            string += sep;
            string += it.next();
        }
        return string;
    }
}
